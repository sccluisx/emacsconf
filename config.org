#+TITLE: Emacs Configuration
#+AUTHOR: Luis Enrique Ramirez CHavez

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Luis Enrique Ramirez Chavez"
      user-mail-address "sccluisx@gmail.com")
#+end_src

* Customize settings
Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Sane defaults
Let's start with some sane defaults, shall we?
Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].
#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

* Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
(setq magit-git-executable "~/tools/bin/git")
#+END_SRC
* Helm
** Setup helm
** Main
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (require 'helm-grep)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq
   helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
   helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
   helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
   helm-candidate-number-limit 500 ; limit the number of displayed canidates
   helm-ff-file-name-history-use-recentf t
   helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
   helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non-nil
                                          ; useful in helm-mini that lists buffers

   )

  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
  (global-set-key (kbd "C-c h o") 'helm-occur)

  (global-set-key (kbd "C-c h C-c w") 'helm-wikipedia-suggest)

  (global-set-key (kbd "C-c h x") 'helm-register)
  ;; (global-set-key (kbd "C-x r j") 'jump-to-register)

  (define-key 'help-command (kbd "C-f") 'helm-apropos)
  (define-key 'help-command (kbd "r") 'helm-info-emacs)
  (define-key 'help-command (kbd "C-l") 'helm-locate-library)

  ;; use helm to list eshell history
  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))

  ;;; Save current position to mark ring
  (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

  ;; show minibuffer history with Helm
  (define-key minibuffer-local-map (kbd "M-p") 'helm-minibuffer-history)
  (define-key minibuffer-local-map (kbd "M-n") 'helm-minibuffer-history)

  (define-key global-map [remap find-tag] 'helm-etags-select)

  (define-key global-map [remap list-buffers] 'helm-buffers-list)



  ;; (use-package helm
  ;;   :ensure t
  ;;   :config
  ;; ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)
  ;; (global-unset-key (kbd "C-x c"))

  ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  ;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  ;; (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  ;; (when (executable-find "curl")
  ;;   (setq helm-google-suggest-use-curl-p t))

  ;; (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
  ;;       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
  ;;       helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  ;;       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
  ;;       helm-ff-file-name-history-use-recentf t)

  ;; (helm-autoresize-mode t)


  ;; (setq helm-locate-fuzzy-match t)
#+END_SRC

Helm imenu
#+BEGIN_SRC emacs-lisp
(require 'helm-imenu)

(defun my-helm-imenu-transformer (cands)
  (with-helm-current-buffer
    (save-excursion
      (cl-loop for (func-name . mrkr) in cands
               collect
               (cons (format "Line %4d: %s"
                             (line-number-at-pos mrkr)
                             (progn (goto-char mrkr)
                                    (buffer-substring mrkr (line-end-position))))
                     (cons func-name mrkr))))))

(defvar my-helm-imenu-source  (helm-make-source "Imenu" 'helm-imenu-source
                                :candidate-transformer
                                'my-helm-imenu-transformer))
(defun my-helm-imenu ()
  (interactive)
  (let ((imenu-auto-rescan t)
        (str (thing-at-point 'symbol))
        (helm-execute-action-at-once-if-one
         helm-imenu-execute-action-at-once-if-one))
    (helm :sources 'my-helm-imenu-source
          :preselect str
          :buffer "*helm imenu*")))
#+END_SRC
** Helm Projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t)
#+END_SRC
** Helm Spotify
 #+BEGIN_SRC emacs-lisp
   (use-package helm-spotify
     :ensure t)
 
;;helm spotify has errors if called without debug-on-error set. So i wrote this wrapper
(defun john-spotify ()
  "wrapper for calling spotify from keyboard shortcut and removing possibility for error"
  (interactive)
  (setq debug-on-error t)
  (helm-spotify)
  (setq debug-on-error nil))

(global-set-key (kbd "<C-M-s-next>") 'john-spotify)
 #+END_SRC

* Themes
** Zen Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
  )
#+END_SRC
* Key bindings
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; helm keybindings
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

* Initialization
#+BEGIN_SRC emacs-lisp
  (split-window-vertically)               
  (find-file "/home/lramirez/Dropbox/linux_sync/orgs/main.org")
  (split-window-horizontally)
  (windmove-down)
  (shell "*shell1*")
  (shell "*shell2*")
  (windmove-up)
  (windmove-right)
  (switch-to-buffer "*scratch*")
  (setq org-directory "~/Dropbox/linux_sync/orgs")
#+END_SRC

* Developer
** General features
*** GGTAGS
#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )


  (use-package helm-gtags
    :ensure t
    :config
    ;; (add-hook 'c-mode-common-hook
    ;;           (lambda ()
    ;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
    ;;               (ggtags-mode t))))
    (add-hook 'dired-mode-hook 'helm-gtags-mode)
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    )

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

  (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
#+END_SRC
    
** function args packages
#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :ensure t
    )
#+END_SRC
    
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    )
#+END_SRC
** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    )
  (add-hook 'after-init-hook 'global-company-mode)
  ;;(setq company-backends (delete 'company-semantic company-backends))

  (use-package cc-mode)
  (define-key c-mode-map  [(tab)] 'company-complete)
  (define-key c++-mode-map  [(tab)] 'company-complete)

  (use-package company-c-headers
    :ensure t
    )
  (add-to-list 'company-backends 'company-c-headers)


  (add-to-list 'company-c-headers-path-system "/usr/include/c++/5.4.0")
  (add-to-list 'company-c-headers-path-system "/usr/include/clang/3.8/include")
#+END_SRC
** CEDET
#+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)
#+END_SRC
** Yasnipet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t)
  (yas-global-mode 1)
#+END_SRC
** Global Semantic idle
#+BEGIN_SRC emacs-lisp
 (global-semantic-idle-summary-mode 1)
 (load "~/.emacs.d/stickyfunc-enhance.el")
 (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
 (semantic-mode 1)
 (require 'stickyfunc-enhance)
 (setq-local eldoc-documentation-function #'ggtags-eldoc-function)
#+END_SRC
** Source code editing
*** Folding 
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook   'hs-minor-mode)
#+END_SRC
*** Identation
#+BEGIN_SRC emacs-lisp
  ;; Available C style:
  ;; “gnu”: The default style for GNU projects
  ;; “k&r”: What Kernighan and Ritchie, the authors of C used in their book
  ;; “bsd”: What BSD developers use, aka “Allman style” after Eric Allman.
  ;; “whitesmith”: Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
  ;; “stroustrup”: What Stroustrup, the author of C++ used in his book
  ;; “ellemtel”: Popular C++ coding standards as defined by “Programming in C++, Rules and Recommendations,” Erik Nyquist and Mats Henricson, Ellemtel
  ;; “linux”: What the Linux developers use for kernel development
  ;; “python”: What Python developers use for extension modules
  ;; “java”: The default style for java-mode (see below)
  ;; “user”: When you want to define your own style
  (setq
   c-default-style "linux" ;; set style to "linux"
   )
#+END_SRC
Setup identation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)  ; automatically indent when press RET

;;activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

(setq-default c-basic-offset 2)

#+END_SRC

** Google Style
#+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook 'google-make-newline-indent)
    (add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC

** SmartParens

#+BEGIN_SRC emacs-lisp
  ; Package: smartparens
  (use-package smartparens
    :ensure t)
  (require 'smartparens-config)
  (show-smartparens-global-mode +1)
  (smartparens-global-mode 1)

  ;; when you press RET, the curly braces automatically
  ;; add another newline
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))
#+END_SRC
** Compilation mode
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))
#+END_SRC
** Debugging
#+BEGIN_SRC emacs-lisp
(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )
#+END_SRC
** Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
   :ensure t)
  (require 'auto-complete-config)
(ac-config-default)
#+END_SRC
** Headers
#+BEGIN_SRC emacs-lisp
(use-package auto-complete-c-headers
:ensure t)
(defun my:ac-c-header-init()
    (require 'auto-complete-c-headers)
    (add-to-list 'ac-sources 'ac-source-c-headers))
(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)
#+END_SRC

** Iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC   

** Flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake-google-cpplint
    :ensure t)

  (defun my:flymake-google-init ()
    ;;(require 'flymake-google-cpplint)
    (custom-set-variables
     '(flymake-google-cpplint-command "/usr/local/bin/cpplint")
      (flymake-google-cpplint-load))
  )

  (add-hook 'c-mode-hook 'my:flymake-google-init)
  (add-hook 'c++-mode-hook 'my:flymake-google-init)
#+END_SRC

** fic-mode
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :ensure t)
(require 'fic-mode)
  (add-hook 'c++-mode-hook (fic-mode 1))
  (add-hook 'emacs-lisp-mode-hook (fic-mode 1))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
(use-package markdown-mode+
  :ensure t)
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

#+END_SRC
* Cursor Terminal Interface
#+BEGIN_SRC emacs-lisp
;; Enable mouse in terminal mode
(unless (display-graphic-p)
(xterm-mouse-mode))
#+END_SRC
* Printing (falta instalar cups)

#+BEGIN_SRC emacs-lisp
  (require 'printing)
  ;; Convenient printing
  (require 'printing)
  (pr-update-menus t)
  ; make sure we use localhost as cups server
  (setenv "CUPS_SERVER" "localhost")
  ;;(use-package cups
  ;; :ensure t)
#+END_SRC
* EMACS GUIDE 
http://www.draketo.de/light/english/emacs/babcore

#+BEGIN_SRC emacs-lisp
  ;; outlining everywhere
  (allout-mode)
  ;; 3.9 Nice line wrapping
  (global-visual-line-mode t)
  ;; 3.11 flyspell
  (use-package flyspell
    :ensure t)
  ; Make german umlauts work.
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;aspell und flyspell
  (setq-default ispell-program-name "aspell")

  ;make aspell faster but less correctly
  (setq ispell-extra-args '("--sug-mode=ultra" "-w" "äöüÄÖÜßñ"))
  (setq ispell-list-command "list")

;; 
#+END_SRC
* Dired plus

#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t)
#+END_SRC
* Nyancat 
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t)
  (use-package nyan-prompt
    :ensure t)
  (nyan-mode t)
#+END_SRC
